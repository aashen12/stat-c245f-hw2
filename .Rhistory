theta <- 1
mse_mle <- function(n) {
2 / ((n + 1) * (n +  2))
}
mse_ub <- function(n) {
1 / (3 * n)
}
n <- 1:100
plot(n, mse_mle(n), col = "blue", type = "l", lwd = 2,
main = "MSE of MLE and MoM Estimators", ylab = "MSE")
lines(mse_ub(n), col = "red", lwd = 2)
legend("topright", c("MLE", "MoM"), col = c("blue", "red"), lwd = 2, inset = 0.05)
theta <- 1
mse_mle <- function(n) {
2 / ((n + 1) * (n +  2))
}
mse_ub <- function(n) {
1 / (3 * n)
}
n <- 1:10
plot(n, mse_mle(n), col = "blue", type = "l", lwd = 2,
main = "MSE of MLE and MoM Estimators", ylab = "MSE")
lines(mse_ub(n), col = "red", lwd = 2)
legend("topright", c("MLE", "MoM"), col = c("blue", "red"), lwd = 2, inset = 0.05)
theta <- 1
mse_mle <- function(n) {
2 / ((n + 1) * (n +  2))
}
mse_ub <- function(n) {
1 / (3 * n)
}
n <- 1:100
plot(n, mse_mle(n), col = "blue", type = "l", lwd = 2,
main = "MSE of MLE and MoM Estimators", ylab = "MSE")
lines(mse_ub(n), col = "red", lwd = 2)
legend("topright", c("MLE", "MoM"), col = c("blue", "red"), lwd = 2, inset = 0.05)
qnorm(0.975)
qnorm(0.90)
qnorm(0.95)
n <- 10000
y <- rbinom(n, 1, 0.5)
y
y <- 2*y-1 ## Do you see what this does?
y
n <- 10000
y <- rbinom(n, 1, 0.5)
y <- 2*y-1 ## Do you see what this does?
x <- cumsum(y)
plot(x, y)
help(cumsum)
choose(4,2)
choose(2,2)
choose(1,2)
choose(3,2)
28328/9
t <- seq(-10, 10, by = 0.01)
f1 <- function(x) 1 / (t^2 - 2)
f1 <- function(x) 1 / (x^2 - 2)
f2 <- function(x) 1 / x^2
plot(t, f1(t))
plot(t, f1(t), type = "l")
abline(v = sqrt(2*log2))
plot(t, f1(t), type = "l")
abline(v = sqrt(2*log2))
abline(v = sqrt(2*log(2)))
abline(v = sqrt(2*log(2)), col = "blue")
t <- seq(-10, 10, by = 0.01)
f1 <- function(x) 1 / (x^2 - 2)
f2 <- function(x) 1 / x^2
plot(t, f1(t), type = "l")
lines(t, f2(t), col = "red")
abline(v = sqrt(2*log(2)), col = "blue")
plot(t, f1(t), type = "l")
lines(t, f2(t), col = "red")
abline(v = sqrt(2*log(2)), col = "blue")
log(2)
log(2) %>% sqrt
sqrt(log(2))
sqrt(log(2))^2
install.packages("data.table")
library(data.table)
set.seed(45L)
X = data.frame(A=sample(3, 10, TRUE),
B=sample(letters[1:3], 10, TRUE),
C=sample(10), stringsAsFactors=FALSE)
X
# Convert X to data.table by reference and
# get the frequency of each "A,B" combination
setDT(X)[, .N, by=.(A,B)]
X
X
# Convert X to data.table by reference and
# get the frequency of each "A,B" combination
setDT(X)[, .N, by=.(A,B)]
X
# Convert X to data.table by reference and
# get the frequency of each "A,B" combination
setDT(X)[, .RO, by=.(A,B)]
# Convert X to data.table by reference and
# get the frequency of each "A,B" combination
setDT(X)[, .O, by=.(A,B)]
# Convert X to data.table by reference and
# get the frequency of each "A,B" combination
setDT(X)[, .M, by=.(A,B)]
# Convert X to data.table by reference and
# get the frequency of each "A,B" combination
setDT(X)[, .N, by=.(A,B)]
X
head(iris)
col_order <- c("Species", "Petal.Width", "Sepal.Length",
"Sepal.Width", "Petal.Length")
iris[, col_order]
iris[, col_order] |> head()
head(iris)
orig_names <- colnames(iris)
try <- modelr::permute_(iris, 1)
try <- modelr::permute_(iris, 1, columns = .)
try <- modelr::permute_(iris, 1, columns = orig_names)
ind <- try$perm[[2]]
ind <- try$perm[[1]]$idx
<- try$perm[[1]]$idx
ind
53/90
M <- matrix(runif(9, 0, 4), 3, 3)
M
eigen(M)
eigen(M)$values
eigen(-M)$values
eigen(M)$values |> sort()
eigen(M)$values |> sort()
eigen(-M)$values |> sort()
eigen(M)$values |> sort()
eigen(-M)$values |> sort()
-eigen(-M)$values |> sort()
eigen(M)$values |> sort()
-eigen(-M)$values |> sort()
eigen(M)$values
eigen(-M)$values
eigen(M)$values
eigen(M)$values
eigen(-M)$values
set.seed(1)
M <- -matrix(runif(9, 0, 4), 3, 3)
M
eigen(M)$values
eigen(-M)$values
set.seed(1)
M <- -matrix(runif(9, 0, 4), 3, 3)
M
eigen(M)$values
set.seed(1)
M <- -matrix(runif(9, 0, 4), 3, 3)
M
eigen(M)$values
eigen(-M)$values
max(eigen(M)$values)
max(eigen(-M)$values)
29508/9
s <- 5
d <- 34
e <- exp(1)
s * log(e*d/s)
s * log(d/(e*s)) + 2*s
5
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("qvalue", force = TRUE)
library(qvalue)
qvalue(0.05)
qvalue
qvalue(0.05, fdr.level = 0.02)
qvalue(c(0.05, 0.02), fdr.level = 0.02)
qvalue(c(0.05, 0.02))
qvalue(c(0.05, 0.02)), 0.0007
qvalue(c(0.05, 0.02, 0.0007))
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2/Test_outputs/Bead_DP_v_plasmid5k")
# define the comparison_name here; for example,
# comparison_name='demo'
comparison_name='Comparison_BeadDP_to_5k_plasmid_output'
fdrcutoff=0.05
# fdrcutoff=-1 # disable FDR cutoff line
fdrcutoff=0.05
# fdrcutoff=-1 # disable FDR cutoff line
####  function definition #
library(knitr)
library(stringr)
library(ggplot2)
library(reshape2)
library(fgsea)
install.packages("fgsea")
####  function definition #
library(knitr)
library(stringr)
library(ggplot2)
library(reshape2)
library(fgsea)
install.packages("fgsea\")
install.packages("fgsea")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("fgsea")
####  function definition #
library(knitr)
library(stringr)
library(ggplot2)
library(reshape2)
library(fgsea)
genreporttable<-function(cpname,genetb){
comparisons=rep(cpname,2)
#genetb=read.table(genesummaryfile,header = T,as.is = T)
ngenes=rep(nrow(genetb),2)
direction=c('neg','pos')
fdr1=c(sum(genetb[,5]<0.01),sum(genetb[,11]<0.01))
fdr5=c(sum(genetb[,5]<0.05),sum(genetb[,11]<0.05))
fdr25=c(sum(genetb[,5]<0.05),sum(genetb[,11]<0.05))
xtb=data.frame(Comparison=comparisons,Genes=ngenes,Selection=direction,FDR1=fdr1,FDR5=fdr5,FDR25=fdr25);
colnames(xtb)=c("Comparison","Genes","Selection","FDR1%","FDR5%","FDR25%");
return (xtb);
}
colors=c( "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00",  "#A65628", "#F781BF",
"#999999", "#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F", "#E5C494", "#B3B3B3",
"#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5",
"#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F")
plotrankedvalues<-function(val, tglist, cutoffline=-1, ...){
plot(val,log='y',ylim=c(max(val),min(val)),type='l',lwd=2, ...)
if(length(tglist)>0){
for(i in 1:length(tglist)){
targetgene=tglist[i];
tx=which(names(val)==targetgene);ty=val[targetgene];
points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
# text(tx+50,ty,targetgene,col=colors[i])
}
legend('topright',tglist,pch=20,pt.cex = 2,cex=1,col=colors)
}
if(cutoffline>0){
lines(c(cutoffline,cutoffline),c(min(val)*1e-5,max(val)*10000),lty=2)
}
}
plotrandvalues<-function(val,targetgenelist,cutoffline=-1, ...){
# choose the one with the best distance distribution
mindiffvalue=0;
randval=val;
for(i in 1:20){
randval0=sample(val)
vindex=sort(which(names(randval0) %in% targetgenelist))
if(max(vindex)>0.9*length(val)){
# print('pass...')
next;
}
mindiffind=min(diff(vindex));
if (mindiffind > mindiffvalue){
mindiffvalue=mindiffind;
randval=randval0;
# print(paste('Diff: ',mindiffvalue))
}
}
plot(randval,log='y',ylim=c(max(randval),min(randval)),pch=20,col='grey', ...)
if(length(targetgenelist)>0){
for(i in 1:length(targetgenelist)){
targetgene=targetgenelist[i];
tx=which(names(randval)==targetgene);ty=randval[targetgene];
points(tx,ty,col=colors[(i %% length(colors)) ],cex=2,pch=20)
text(tx+length(randval)/100,ty,targetgene,col=colors[i],adj=1,pos=4)
}
}
if(cutoffline>0){
lines(c(-100,length(randval)*2),c(cutoffline,cutoffline),lty=2)
}
}
getcomparisonsfromlogfile<-function(logfile){
logline=readLines(file(logfile,"r"),n = 1)
#print(logline)
logbk=strsplit(logline,' ')[[1]]
ctrl_sample=c()
treat_sample=c()
for(i_x in 1:length(logbk)){
if(logbk[i_x]=='-c' | logbk[i_x]=='--control'){
ctrl_sample=strsplit(logbk[i_x+1],',')[[1]]
}
if(logbk[i_x]=='-t' | logbk[i_x]=='--treatment'){
treat_sample=strsplit(logbk[i_x+1],',')[[1]]
}
}
#close(logff)
return (list(ctrl_sample,treat_sample))
}
plotindvidualsgrnas<-function(sg_table,targetgene,collabel){
xsg_c=sg_table[which(sg_table[,'Gene']==targetgene),c('control_count','treatment_count')]
rownames(xsg_c)=sg_table[which(sg_table[,'Gene']==targetgene),'sgrna']
xsg_c2=paste(xsg_c[,1],xsg_c[,2],sep='/')
xsg_c3=t(data.frame(lapply(strsplit(xsg_c2,'/'),as.numeric)))
rownames(xsg_c3)=rownames(xsg_c)
targetmat=xsg_c3
targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0]);
# yrange[1]=1; # set the minimum value to 1
for(i in 1:nrow(targetmat)){
vali=targetmat[i,]+1;
if(i==1){
plot(1:length(vali),vali,type='b',las=1,pch=20,main=paste('sgRNAs in',targetgene),ylab='Read counts',xlab='Samples',xlim=c(0.7,length(vali)+0.3),ylim = yrange,col=colors[(i %% length(colors))],xaxt='n',log='y')
if(length(collabel)==length(vali)){
axis(1,at=1:length(vali),labels=(collabel),las=2)
}else{
warning('Cannot extract sample labels.')
}
# lines(0:100,rep(1,101),col='black');
}else{
lines(1:length(vali),vali,type='b',pch=20,col=colors[(i %% length(colors))])
}
}
}
plotindvidualsgrnas_lfc<-function(sg_table,targetgene,collabel){
xsg_c=sg_table[which(sg_table[,'Gene']==targetgene),c('control_count','treatment_count')]
rownames(xsg_c)=sg_table[which(sg_table[,'Gene']==targetgene),'sgrna']
xsg_c2=paste(xsg_c[,1],xsg_c[,2],sep='/')
xsg_c3=t(data.frame(lapply(strsplit(xsg_c2,'/'),as.numeric)))
rownames(xsg_c3)=rownames(xsg_c)
targetmat=xsg_c3
targetmatvec=unlist(targetmat)+1
yrange=range(targetmatvec[targetmatvec>0])
ncontrol=str_count(xsg_c[1,1],"/")+1
targetmatvec_log=log2(targetmatvec)
if(ncontrol>1 & nrow(targetmatvec_log)>1){
ctrlmean=rowMeans(targetmatvec_log[,1:ncontrol])
}else{
ctrlmean=targetmatvec_log[,1]
}
targetmatvec_log=targetmatvec_log-ctrlmean
colnames(targetmatvec_log)=collabel
p<-ggplot(melt(targetmatvec_log),aes(x=Var2,y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0,  space = "Lab", #limit = c(-1,1),
name="Log2 FC")+
theme_minimal()+
xlab('Samples')+
ylab('Guides')+
ggtitle(targetgene)+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))
print(p)
#return(targetmatvec_log)
}
plot_rra_or_p_scores<-function(gstable,startindex,fdrcolumn,target_list,...){
pvec=gstable[,startindex]
names(pvec)=gstable[,'id']
pvec=sort(pvec);
ncutoff=ifelse(fdrcutoff>0,sum(gstable[,fdrcolumn]<fdrcutoff),-1)
vcutoff=ifelse(fdrcutoff>0 & ncutoff>0,max(pvec[1:ncutoff]),-1)
plotrankedvalues(pvec,target_list,cutoffline = ncutoff,...)
plotrandvalues(pvec,target_list,cutoffline = vcutoff,...)
}
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
pvals_bead <- read.txt(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
pvals_bead <- read.table(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
path_bead <- "/Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "/Test_outputs/Bead_DP_v_plasmid5k/"
pvals_bead <- read.table(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "/Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "/Test_outputs/Bead_DP_v_plasmid5k/"
pvals_bead <- read.table(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Bead_DP_v_plasmid5k/"
pvals_bead <- read.table(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
pvals_bead
View(pvals_bead)
knitr::opts_chunk$set(echo = TRUE)
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Bead_DP_v_plasmid5k/"
pvals_bead <- read.table(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
pvals_bead
summ_bead <- read.table(paste0(path_bead,"Comparison_BeadDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
qvalue(summ_bead$neg.p.value)
qvalue(summ_bead$neg.p.value, fdr.level = 0.05)
qvalue(summ_bead$neg.p.value)
summ_bead
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)) %>%
relocate(.after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)) %>%
relocate(.after = pos.p.value)
qvalue(summ_bead$neg.p.value)
summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues)
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(.after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(.after = pos.p.value)
summ_bead_qvals
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(.after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(.after = pos.p.value)
summ_bead_qvals
relocate
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(.after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(.after = pos.p.value)
summ_bead_qvals
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value)
summ_bead_qvals
qv <- qvalue(summ_bead$neg.p.value)
qv <- qvalue(summ_bead$neg.p.value)
qv$pvalues
summ_bead$neg.p.value
qv$pvalues
str(qv)
summ_bead <- read.table(paste0(path_cc,"Comparison_CcDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Bead_DP_v_plasmid5k/"
summ_bead <- read.table(paste0(path_cc,"Comparison_CcDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
summ_bead <- read.table(paste0(path_cc,"Comparison_CcDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Cc_DP_v_plasmid5k/"
summ_bead <- read.table(paste0(path_cc,"Comparison_CcDP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value)
summ_bead_qvals
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Cc_DN_v_plasmid5k/"
summ_bead <- read.table(paste0(path_cc,"Comparison_CcDN_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value)
summ_bead_qvals
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value) %>% arrange(neg.qval)
summ_bead_qvals
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value) %>% arrange(pos.qval)
summ_bead_qvals
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Cc_SP_v_plasmid5k/"
# convert p-values to q values
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Andyâ€™s MacBook Pro/UC Berkeley/spring-2022/stat-c245f/stat-c245f-hw2")
library(qvalue)
library(tidyverse)
path_bead <- "./Test_outputs/Bead_DP_v_plasmid5k/"
path_cc <- "./Test_outputs/Cc_SP_v_plasmid5k/"
summ_bead <- read.table(paste0(path_cc,"Comparison_CcSP_to_5k_plasmid_output.gene_summary.txt"),
header = TRUE)
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value) %>% arrange(pos.qval)
summ_bead_qvals
summ_bead_qvals <- summ_bead %>%
mutate(neg.qval = qvalue(summ_bead$neg.p.value)$qvalues) %>%
relocate(neg.qval, .after = neg.p.value) %>%
mutate(pos.qval = qvalue(summ_bead$pos.p.value)$qvalues) %>%
relocate(pos.qval, .after = pos.p.value) %>% arrange(neg.qval)
summ_bead_qvals
